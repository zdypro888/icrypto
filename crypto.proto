syntax = "proto3";
package icrypto;

import "google/api/annotations.proto";

option go_package = "github.com/zdypro888/icrypto";

enum OSEnum {
  All = 0;
  macOS = 1;
  iOS = 2;
  Android = 3;
}

message Device {
  OSEnum OStype = 1;
  string SerialNumber = 2;
  // macOS
  string Model = 3;
  uint64 OSRevision = 4;
  string OSVersion = 5;
  string BoardId = 6;
  string DiskId = 7;
  string HardWareUUID = 8;
  bytes MacAddress = 9;
  bytes ROM = 10;
  string MLB = 11;
  bytes KGq3489ugfi = 12;
  bytes KFyp98tpgj = 13;
  bytes KkbjfrfpoJU = 14;
  bytes KoycqAZloTNDm = 15;
  bytes KabKPld1EcMni = 16;
  // iOS
  string ProductType = 17;
  uint64 UniqueChipID = 18;
  string UniqueDeviceID = 19;
  string WifiAddress = 21;
  string BluetoothAddress = 26;
  string SecureElementSN = 28;
  // Global
  string BuildVersion = 29;
  string ProductVersion = 30;
  bytes FairplayKeyData = 33;
  bytes ADI = 35;
  bytes APTicket = 47;
  bytes SUInfo = 50;
}

message InitializeRequest {
  uint64 Control = 1;
  Device Device = 2;
}
message InitializeResponse {}

message FinalizeRequest {}
message FinalizeResponse {}

message ActivationDRMHandshakeRequest {}
message ActivationDRMHandshakeResponse {
  bytes CollectionBlob = 1;
  bytes HandshakeRequestMessage = 2;
}

message ActivationDRMProcessRequest {
  bytes SUInfo = 1;
  bytes HandshakeResponseMessage = 2;
  bytes serverKP = 3;
}
message ActivationDRMProcessResponse {
  bytes UIK = 1;
  bytes RK = 2;
}

message ActivationDRMSignatureRequest { bytes ActivationInfoXML = 1; }
message ActivationDRMSignatureResponse {
  bytes FairPlayCertChain = 1;
  bytes FairPlaySignature = 2;
  bytes RKSignature = 3;
  bytes SignActRequest = 4;
  bytes ServerKP = 5;
}

message ActivationDeprecatedRequest { bytes ActivationInfoXML = 1; }
message ActivationDeprecatedResponse {
  bytes Sign = 1;
  bytes Cert = 2;
}

message ActivationRecordRequest {
  bool Unbrick = 1;
  bytes AccountTokenCertificate = 2;
  bytes DeviceCertificate = 3;
  bytes RegulatoryInfo = 4;
  bytes FairPlayKeyData = 5;
  bytes AccountToken = 6;
  bytes AccountTokenSignature = 7;
  bytes UniqueDeviceCertificate = 8;
}
message ActivationRecordResponse {
  bytes SubCAKey = 1;
  bytes AttestationKey = 2;
  bytes UIK = 3;
  bytes RK = 4;
  bytes PSCSui = 5;
}

message ADIStartProvisioningRequest {
  int64 DSID = 1;
  bytes SPIM = 2;
}
message ADIStartProvisioningResponse {
  uint64 Session = 1;
  bytes CPIM = 2;
}

message ADIEndProvisioningRequest {
  uint64 Session = 1;
  int64 DSID = 2;
  int64 RINFO = 3;
  bytes PTM = 4;
  bytes TK = 5;
  bytes ADI = 10;
}
message ADIEndProvisioningResponse {
  bytes MID = 1;
  bytes OTP = 2;
  bytes ADI = 10;
}

message ADIGenerateLoginCodeRequest {
  int64 DSID = 1;
  bytes ADI = 2;
}
message ADIGenerateLoginCodeResponse {
  int32 Code = 1;
  uint32 LoginCode = 2;
}

message AbsintheHelloRequest { int32 Mode = 1; }
message AbsintheHelloResponse { bytes HelloMessage = 1; }

message AbsintheAddOptionRequest {
  bytes BIKKey = 1;
  bytes BAACert = 2;
  bytes IntermediateRootCert = 3;
}
message AbsintheAddOptionResponse {}

message AbsintheAtivateSessionRequest {
  bytes ValidationData = 1;
  bytes ServerKey = 2;
}
message AbsintheAtivateSessionResponse {}

message AbsintheSignDataRequest { bytes SignData = 1; }
message AbsintheSignDataResponse {
  bytes Signature = 1;
  bytes OutServKey = 2;
}

message IndentitySessionRequest { bytes Cert = 1; }
message IndentitySessionResponse { bytes Request = 1; }

message IndentityValidationRequest {
  bytes Response = 1;
  bytes SignData = 2;
}
message IndentityValidationResponse { bytes VlidationData = 1; }

message SAPExchangeRequest { bytes Data = 1; }
message SAPExchangeResponse { bytes ExchangeData = 1; }

message SAPSignPrimeRequest { bytes SignData = 1; }
message SAPSignPrimeResponse { bytes Signature = 1; }

message SAPVerifyPrimeRequest { bytes Data = 1; }
message SAPVerifyPrimeResponse {}

message SAPSignRequest { bytes SignData = 1; }
message SAPSignResponse { bytes Signature = 1; }

message SAPVerifyRequest { bytes Data = 1; bytes Signature = 2; }
message SAPVerifyResponse {}

service CryptService {
  rpc Initialize(InitializeRequest) returns (InitializeResponse) {
    option (google.api.http) = {
      post: "/initialize"
      body: "*"
    };
  }
  rpc Finalize(FinalizeRequest) returns (FinalizeResponse) {
    option (google.api.http) = {
      post: "/finalize"
      body: "*"
    };
  }

  rpc ActivationDRMHandshake(ActivationDRMHandshakeRequest)
      returns (ActivationDRMHandshakeResponse) {
    option (google.api.http) = {
      post: "/activation/drm/handshake"
      body: "*"
    };
  }
  rpc ActivationDRMProcess(ActivationDRMProcessRequest)
      returns (ActivationDRMProcessResponse) {
    option (google.api.http) = {
      post: "/activation/drm/process"
      body: "*"
    };
  }
  rpc ActivationDRMSignature(ActivationDRMSignatureRequest)
      returns (ActivationDRMSignatureResponse) {
    option (google.api.http) = {
      post: "/activation/drm/signature"
      body: "*"
    };
  }
  rpc ActivationDeprecated(ActivationDeprecatedRequest)
      returns (ActivationDeprecatedResponse) {
    option (google.api.http) = {
      post: "/activation/deprecated"
      body: "*"
    };
  }
  rpc ActivationRecord(ActivationRecordRequest)
      returns (ActivationRecordResponse) {
    option (google.api.http) = {
      post: "/activation/record"
      body: "*"
    };
  }

  rpc ADIStartProvisioning(ADIStartProvisioningRequest)
      returns (ADIStartProvisioningResponse) {
    option (google.api.http) = {
      post: "/adi/start-provisioning"
      body: "*"
    };
  }
  rpc ADIEndProvisioning(ADIEndProvisioningRequest)
      returns (ADIEndProvisioningResponse) {
    option (google.api.http) = {
      post: "/adi/end-provisioning"
      body: "*"
    };
  }
  rpc ADIGenerateLoginCode(ADIGenerateLoginCodeRequest)
      returns (ADIGenerateLoginCodeResponse) {
    option (google.api.http) = {
      post: "/adi/generate-login-code"
      body: "*"
    };
  }

  rpc AbsintheHello(AbsintheHelloRequest) returns (AbsintheHelloResponse) {
    option (google.api.http) = {
      post: "/absinthe/hello"
      body: "*"
    };
  }
  rpc AbsintheAddOption(AbsintheAddOptionRequest)
      returns (AbsintheAddOptionResponse) {
    option (google.api.http) = {
      post: "/absinthe/add-option"
      body: "*"
    };
  }
  rpc AbsintheAtivateSession(AbsintheAtivateSessionRequest)
      returns (AbsintheAtivateSessionResponse) {
    option (google.api.http) = {
      post: "/absinthe/activate-session"
      body: "*"
    };
  }
  rpc AbsintheSignData(AbsintheSignDataRequest)
      returns (AbsintheSignDataResponse) {
    option (google.api.http) = {
      post: "/absinthe/sign-data"
      body: "*"
    };
  }

  rpc IndentitySession(IndentitySessionRequest)
      returns (IndentitySessionResponse) {
    option (google.api.http) = {
      post: "/identity/session"
      body: "*"
    };
  }
  rpc IndentityValidation(IndentityValidationRequest)
      returns (IndentityValidationResponse) {
    option (google.api.http) = {
      post: "/identity/validation"
      body: "*"
    };
  }

  rpc SAPExchange(SAPExchangeRequest) returns (SAPExchangeResponse) {
    option (google.api.http) = {
      post: "/sap/exchange"
      body: "*"
    };
  }

  rpc SAPSignPrime(SAPSignPrimeRequest) returns (SAPSignPrimeResponse) {
    option (google.api.http) = {
      post: "/sap/sign-prime"
      body: "*"
    };
  }
  rpc SAPVerifyPrime(SAPVerifyPrimeRequest) returns (SAPVerifyPrimeResponse) {
    option (google.api.http) = {
      post: "/sap/verify-prime"
      body: "*"
    };
  }
  rpc SAPSign(SAPSignRequest) returns (SAPSignResponse) {
    option (google.api.http) = {
      post: "/sap/sign"
      body: "*"
    };
  }
  rpc SAPVerify(SAPVerifyRequest) returns (SAPVerifyResponse) {
    option (google.api.http) = {
      post: "/sap/verify"
      body: "*"
    };
  }
}