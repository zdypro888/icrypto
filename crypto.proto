syntax = "proto3";
package icrypto;

option go_package = "github.com/zdypro888/icrypto";

message InitializeRequest {
  uint64 Control = 1;
  bytes DevicePlist = 2;
}
message InitializeResponse {
}

message FinalizeRequest {
}
message FinalizeResponse {
}

message ActivationDRMHandshakeRequest {
}
message ActivationDRMHandshakeResponse {
  bytes CollectionBlob = 1;
  bytes HandshakeRequestMessage = 2;
}

message ActivationDRMProcessRequest {
  bytes SUInfo = 1;
  bytes HandshakeResponseMessage = 2;
  bytes serverKP = 3;
}
message ActivationDRMProcessResponse {
  bytes UIK = 1;
  bytes RK = 2;
}

message ActivationDRMSignatureRequest {
  bytes ActivationInfoXML = 1;
}
message ActivationDRMSignatureRespone {
  bytes FairPlayCertChain = 1;
  bytes FairPlaySignature = 2;
  bytes RKSignature = 3;
  bytes SignActRequest = 4;
  bytes ServerKP = 5;
}

message ActivationDeprecatedRequest { 
  bytes ActivationInfoXML = 1;
}
message ActivationDeprecatedResponse {
  bytes Sign = 1;
  bytes Cert = 2;
}

message ActivationRecordRequest { 
  bool Unbrick = 1;
	bytes AccountTokenCertificate = 2;
	bytes DeviceCertificate = 3;
	bytes RegulatoryInfo = 4;
	bytes FairPlayKeyData = 5;
	bytes AccountToken = 6;
	bytes AccountTokenSignature = 7;
	bytes UniqueDeviceCertificate = 8;
}
message ActivationRecordResponse {
  bytes SubCAKey = 1;
  bytes AttestationKey = 2;
  bytes UIK = 3;
  bytes RK = 4;
  bytes PSCSui = 5;
}

message ADIStartProvisioningRequest {
  int64 DSID = 1;
  bytes SPIM = 2;
}
message ADIStartProvisioningResponse {
  uint64 Session = 1;
  bytes CPIM = 2;
}

message ADIEndProvisioningRequest {
  uint64 Session = 1;
  int64 DSID = 2;
  int64 RINFO = 3;
  bytes PTM = 4;
  bytes TK = 5;
  bytes ADI = 10;
}
message ADIEndProvisioningResponse {
  bytes MID = 1;
  bytes OTP = 2;
  bytes ADI = 10;
}

message ADIGenerateLoginCodeRequest {
  int64 DSID = 1;
  bytes ADI = 2;
}
message ADIGenerateLoginCodeResponse {
  int32 Code = 1;
  uint32 LoginCode = 2;
}

message AbsintheHelloRequest {
  int32 Mode = 1;
}
message AbsintheHelloResponse {
  bytes HelloMessage = 1;
}

message AbsintheAddOptionRequest {
  bytes BIKKey = 1;
  bytes BAACert = 2;
  bytes IntermediateRootCert = 3;
}
message AbsintheAddOptionResponse {
}

message AbsintheAtivateSessionRequest {
  bytes ValidationData = 1;
  bytes ServerKey = 2;
}
message AbsintheAtivateSessionResponse {
}

message AbsintheSignDataRequest {
  bytes SignData = 1;
}
message AbsintheSignDataResponse {
  bytes Signature = 1;
  bytes OutServKey = 2;
}

message IndentitySessionRequest {
  bytes Cert = 1;
}
message IndentitySessionResponse {
  bytes Request = 1;
}

message IndentityValidationRequest {
  bytes Response = 1;
  bytes SignData = 2;
}
message IndentityValidationResponse {
  bytes VlidationData = 1;
}

service CryptService {
  rpc Initialize(InitializeRequest) returns (InitializeResponse){}
  rpc Finalize(FinalizeRequest) returns (FinalizeResponse){}  

  rpc ActivationDRMHandshake(ActivationDRMHandshakeRequest) returns (ActivationDRMHandshakeResponse){}
  rpc ActivationDRMProcess(ActivationDRMProcessRequest) returns (ActivationDRMProcessResponse){}
  rpc ActivationDRMSignature(ActivationDRMSignatureRequest) returns (ActivationDRMSignatureRespone){}
  rpc ActivationDeprecated(ActivationDeprecatedRequest) returns (ActivationDeprecatedResponse){}
  rpc ActivationRecord(ActivationRecordRequest) returns (ActivationRecordResponse){}

  rpc ADIStartProvisioning(ADIStartProvisioningRequest) returns (ADIStartProvisioningResponse){}
  rpc ADIEndProvisioning(ADIEndProvisioningRequest) returns (ADIEndProvisioningResponse){}
  rpc ADIGenerateLoginCode(ADIGenerateLoginCodeRequest) returns (ADIGenerateLoginCodeResponse){}

  rpc AbsintheHello(AbsintheHelloRequest) returns (AbsintheHelloResponse){}
  rpc AbsintheAddOption(AbsintheAddOptionRequest) returns (AbsintheAddOptionResponse){}
  rpc AbsintheAtivateSession(AbsintheAtivateSessionRequest) returns (AbsintheAtivateSessionResponse){}
  rpc AbsintheSignData(AbsintheSignDataRequest) returns (AbsintheSignDataResponse){}

  rpc IndentitySession(IndentitySessionRequest) returns (IndentitySessionResponse){}
  rpc IndentityValidation(IndentityValidationRequest) returns (IndentityValidationResponse){}
}